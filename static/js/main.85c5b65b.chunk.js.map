{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Text","Typography","Title","ambientLight","AmbientLight","color","intensity","pointLight1","PointLight","position","pointLight2","lightingEffect","LightingEffect","material","ambient","diffuse","shininess","specularColor","INITIAL_VIEW_STATE","longitude","latitude","zoom","minZoom","maxZoom","pitch","bearing","colorRange","getTooltip","object","console","log","lat","lng","airQ","colorValue","infectionCount","elevationValue","Number","isFinite","toFixed","getInfectionsCount","data","count","i","length","infections","App","threshold","radiusPixels","mapStyle","coverage","useState","fullData","setData","airPollute","setAirPollute","updateAll","updateJan","janData","updateFeb","febData","updateMarch","marchData","updateApril","aprilData","updateMay","mayData","updateJune","juneData","Navbar","props","className","children","NavItem","open","setOpen","href","onClick","icon","DropdownMenu","activeMenu","setActiveMenu","menuHeight","setMenuHeight","dropdownRef","useRef","calcHeight","el","height","offsetHeight","DropdownItem","goToMenu","leftIcon","rightIcon","useEffect","current","firstChild","style","ref","CSSTransition","in","timeout","classNames","unmountOnExit","onEnter","target","layers","HexagonLayer","id","elevationRange","elevationScale","extruded","getElevationValue","d","reduce","sum","point","getPosition","COORDINATES","getColorValue","pickable","radius","backgroundColor","zIndex","marginTop","right","display","flexDirection","width","paddingLeft","paddingRight","paddingTop","alignItems","justifyContent","map","title","value","effects","initialViewState","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85c5b65b.chunk.js","sourcesContent":["// import sampleData from \"./data/covids.json\";\nimport './index.css';\nimport fullData from \"./data/full.json\";\nimport janData from \"./data/jan.json\";\nimport febData from \"./data/feb.json\";\nimport marchData from \"./data/mar.json\";\nimport aprilData from \"./data/apr.json\";\nimport mayData from \"./data/may.json\";\nimport juneData from \"./data/jun.json\";\nimport React, { useState, useEffect, useRef} from \"react\";\nimport \"antd/dist/antd.css\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { AmbientLight, PointLight, LightingEffect } from \"@deck.gl/core\";\nimport { HexagonLayer } from \"@deck.gl/aggregation-layers\";\nimport { Typography } from \"antd\";\nimport { Statistic } from \"antd\";\nimport { CSSTransition } from 'react-transition-group'\n\nconst { Title, Text } = Typography;\n\n\n// Set your mapbox access token here\nconst mapboxApiAccessToken =\n  \"pk.eyJ1IjoidmVyYTFrIiwiYSI6ImNrZjQ3aWJoczA4ZGQydm43cXFjcW5peTkifQ.sYJ99dX7B8QyPgV_-TszTA\"; // public token URL\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight1 = new PointLight({\n  color: [255, 255, 255],\n  intensity: 0.8,\n  position: [-0.144528, 49.739968, 80000]\n});\n\nconst pointLight2 = new PointLight({\n  color: [255, 255, 255],\n  intensity: 0.8,\n  position: [-3.807751, 54.104682, 8000]\n});   \n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight1, pointLight2});\n\nconst material = {\n  ambient: 0.64,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [51, 51, 51]\n};\n\nconst INITIAL_VIEW_STATE = {\n  longitude: 105.0,\n  latitude: 40.0,\n  zoom: 3.5,\n  minZoom: 2,\n  maxZoom: 15,\n  pitch: 40.5,\n  bearing: -27\n};\n\nexport const colorRange = [\n  [49, 201, 38],\n  [119, 212, 112],\n  [50, 191, 120],\n  [90, 75, 250],\n  [222, 36, 242],\n  [145, 6, 73]\n];\n\nexport const heatmapColorRange = [\n  [255, 255, 178],\n  [254, 217, 118],\n  [254, 178, 76],\n  [253, 141, 60],\n  [240, 59, 32],\n  [189, 0, 38],\n];\n\n\nfunction getTooltip({ object }) {\n  if (!object) {\n    return null;\n  }\n  console.log(object);\n  const lat = object.position[1];\n  const lng = object.position[0];\n  const airQ = object.colorValue;\n  const infectionCount = object.elevationValue / 10000;\n\n  return `\\\n    Latitude: ${Number.isFinite(lat) ? lat.toFixed(6) : \"\"}\n    Longitude: ${Number.isFinite(lng) ? lng.toFixed(6) : \"\"}\n    Air Quality: ${airQ} \n    Number of Infections: ${infectionCount} `;\n}\n\nfunction getInfectionsCount(data) {\n  var count = 0;\n  for (var i = 0; i < data.length; i++) {\n\n    count += data[i].infections;\n  }\n  return count;\n}\n\nexport default function App({\n  intensity = 1,\n  threshold = 0.1,\n  radiusPixels = 30,\n  mapStyle = \"mapbox://styles/mapbox/dark-v9\",\n  coverage = 1,\n}) {\n  // USESTATES FOR DATA AND VISUALIZATION\n  const [data, setData] = useState(fullData);\n  const [airPollute, setAirPollute] = useState('Index');\n  \n  const updateAll = () => setData(fullData);\n  const updateJan = () => setData(janData);\n  const updateFeb = () => setData(febData);\n  const updateMarch = () => setData(marchData);\n  const updateApril = () => setData(aprilData);\n  const updateMay = () => setData(mayData);\n  const updateJune = () => setData(juneData);\n\n  const changetoAQI = () => setAirPollute('AQI');\n  const changeToCO = () => setAirPollute('CO');\n  const changeToO3 = () => setAirPollute('O3');\n  const changeToCH4 = () => setAirPollute('CH4');\n\n// NAVBAR FUNCTIONS\n\n  function Navbar(props) {\n    return (\n      <nav className=\"navbar\">\n        <ul className=\"navbar-nav\">{props.children}</ul>\n      </nav>\n    );\n  }\n\n  function NavItem(props) {\n    const [open, setOpen] = useState(false);\n\n    return (\n      <li className=\"nav-item\">\n        <a href=\"#\" className=\"icon-button\" onClick={() => setOpen(!open)}>\n          {props.icon}\n        </a>\n        {open && props.children}\n      </li>\n    );\n  }\n\n  function DropdownMenu() {\n    const [activeMenu, setActiveMenu] = useState('main');\n    const [menuHeight, setMenuHeight] = useState(null);\n    const dropdownRef = useRef(null);\n\n    useEffect(() => {\n      setMenuHeight(dropdownRef.current?.firstChild.offsetHeight)\n    }, [])\n\n    function calcHeight(el) {\n      const height = el.offsetHeight;\n      setMenuHeight(height);\n    }\n\n    function DropdownItem(props) {\n      return (\n        <a href=\"#\" className=\"menu-item\" onClick={() => props.goToMenu && setActiveMenu(props.goToMenu)}>\n          <span className=\"icon-button\">{props.leftIcon}</span>\n          {props.children}\n          <span className=\"icon-right\">{props.rightIcon}</span>\n        </a>\n      );\n    }\n    return (\n      <div className=\"dropdown\" style={{ height: menuHeight }} ref={dropdownRef}>\n\n        <CSSTransition\n          in={activeMenu === 'main'}\n          timeout={500}\n          classNames=\"menu-primary\"\n          unmountOnExit\n          onEnter={calcHeight}>\n          <div className=\"menu\">\n            <DropdownItem\n              leftIcon=\"🕓\"\n              goToMenu=\"time\">\n              Change Time Range\n            </DropdownItem>\n            <DropdownItem\n              leftIcon=\"☁\"\n              goToMenu=\"airPollutant\">\n              Change Air Pollutant\n            </DropdownItem>\n            <DropdownItem\n              leftIcon=\"📂\">\n                <a href=\"https://github.com/Xsort-Programming/one-health-approach\" target=\"_blank\">View Code</a>\n            </DropdownItem>\n            <DropdownItem\n              leftIcon=\"ℹ\">\n                <a href=\"https://github.com/Xsort-Programming/one-health-approach/tree/main/Data_and_analysis_scripts\" target=\"_blank\">\n                Data Source: On GitHub page\n                </a>\n            </DropdownItem>\n          </div>\n        </CSSTransition>\n\n        <CSSTransition\n          in={activeMenu === 'time'}\n          timeout={500}\n          classNames=\"menu-secondary\"\n          unmountOnExit\n          onEnter={calcHeight}>\n          <div className=\"menu\">\n            <DropdownItem goToMenu=\"main\" leftIcon=\"◀️\">\n              Go Back\n            </DropdownItem>\n            <div onClick={updateAll}>\n              <DropdownItem leftIcon=\"✓\">All</DropdownItem>\n            </div>\n            <div onClick={updateJan}>\n              <DropdownItem leftIcon=\"J\">Jan</DropdownItem>\n            </div>\n            <div onClick={updateFeb}>\n              <DropdownItem leftIcon=\"F\">Feb</DropdownItem>\n            </div>\n            <div onClick={updateMarch}>\n              <DropdownItem leftIcon=\"M\">March</DropdownItem>\n            </div>\n            <div onClick={updateApril}>\n              <DropdownItem leftIcon=\"A\">April</DropdownItem>\n            </div>\n            <div onClick={updateMay}>\n              <DropdownItem leftIcon=\"M\">May</DropdownItem>\n            </div>\n            <div onClick={updateJune}>\n              <DropdownItem leftIcon=\"J\">June</DropdownItem>  \n            </div>\n          </div>\n        </CSSTransition>\n\n        <CSSTransition\n          in={activeMenu === 'airPollutant'}\n          timeout={500}\n          classNames=\"menu-secondary\"\n          unmountOnExit\n          onEnter={calcHeight}>\n          <div className=\"menu\">\n            <DropdownItem goToMenu=\"main\" leftIcon=\"◀️\">\n              <p>Go Back</p>\n            </DropdownItem>\n            <div onClick={changetoAQI()}>\n            <DropdownItem leftIcon=\"AQI\">Air Quality Index (Xsort)</DropdownItem>\n            </div>\n            <div onClick={changeToCH4()}>\n            <DropdownItem leftIcon=\"CH4\">Methane</DropdownItem>\n            </div>\n            <div onClick={changeToO3()}>\n            <DropdownItem leftIcon=\"O3\">Ozone</DropdownItem>\n            </div>\n            <div onClick={changeToCO()}>\n            <DropdownItem leftIcon=\"CO\">Carbon</DropdownItem>\n            </div>\n          </div>\n        </CSSTransition>\n      </div>\n    );\n  }\n\n// LAYERS\n  const layers = [\n      new HexagonLayer({\n      id: \"hexagon\",\n      colorRange,\n      coverage,\n      data,\n      elevationRange: [0, 20000],\n      elevationScale: 100,\n      extruded: true,\n      getElevationValue: (d) => d.reduce((sum, point) => sum + point[\"infections\"], 0) * 10000,\n      getPosition: (d) => [d.COORDINATES[0], d.COORDINATES[1]],\n      getColorValue: (d) => d.reduce((sum, point) => sum + point[airPollute], 0) / d.length,\n      pickable: true,\n      radius: 10000,\n      material,\n    })\n  ];\n\n  return (\n    <div>\n      <div\n        style={{\n          backgroundColor: \"#B9B6B5\",\n          zIndex: \"1000\",\n          position: \"absolute\",\n          marginTop: \"40.0%\",\n          right: \"1.5%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"160px\",\n          width: \"300px\",\n          paddingLeft: \"20px\",\n          paddingRight: \"20px\",\n          paddingTop: \"10px\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\", \n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}>\n        <Text>Air Pollution Safety Index</Text>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-evenly\",\n            paddingTop: \"7px\",\n          }}\n        >\n          {colorRange.map((color) => (\n                <div\n                  style={{\n                    width: \"16.666677%\",\n                    height: \"18px\",\n                    backgroundColor: `rgb(${color[0]}, ${color[1]}, ${color[2]})`,\n                  }}\n                />\n              ))}\n        </div>\n        <div\n          className=\"legend-text\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            paddingTop: \"6px\",\n          }}\n        >\n          <Text>Low Hazard</Text>\n          <Text>High Hazard</Text>\n        </div>\n        <div style={{ paddingTop: \"7px\" }}>\n          <Statistic title=\"Total Covid-19 Infections: \" value={getInfectionsCount(data)} />\n        </div>\n      </div>\n      <div\n        style={{\n          zIndex: \"1000\",\n          right: \"0.0%\",\n          position: \"absolute\",\n        }}\n      >\n        <Navbar>\n          <NavItem icon=\"↡\">\n            <DropdownMenu/>\n          </NavItem>\n        </Navbar>\n      </div>\n      <div\n        style={{\n          zIndex: \"-1\",\n        }}\n      >\n        <DeckGL\n          effects={[lightingEffect]}\n          initialViewState={INITIAL_VIEW_STATE}\n          controller={true}\n          layers={layers}\n          getTooltip={getTooltip}\n        >\n          <StaticMap\n            reuseMaps\n            mapStyle={mapStyle}\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={mapboxApiAccessToken}\n          />\n        </DeckGL>\n      </div>\n    </div>\n\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}